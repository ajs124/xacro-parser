{"version":3,"file":"XacroParser.js","sources":["../src/utils.js","../src/evaluateExpression.js","../src/XacroParser.js"],"sourcesContent":["\r\nexport function getUrlBase(url) {\r\n    const tokens = url.split(/[\\\\/]/g);\r\n    tokens.pop();\r\n    if (tokens.length === 0) {\r\n        return './';\r\n    } else {\r\n        return tokens.join('/') + '/';\r\n    }\r\n}\r\n\r\n// XML Helpers\r\n// QuerySelectorAll that respects tag prefixes like 'xacro:'\r\nexport function getElementsWithName(node, name, res = []) {\r\n    if (node.tagName === name) {\r\n        res.push(node);\r\n    }\r\n    for (let i = 0, l = node.children.length; i < l; i++) {\r\n        const child = node.children[i];\r\n        getElementsWithName(child, name, res);\r\n    }\r\n    return res;\r\n}\r\n\r\n// Deep clone an xml node without the macro or property tags.\r\nexport function deepClone(node, stripPropsMacros) {\r\n    const cloned = node.cloneNode();\r\n    const childNodes = node.childNodes;\r\n    for (let i = 0, l = childNodes.length; i < l; i++) {\r\n        const child = childNodes[i];\r\n        const tagName = child.tagName;\r\n        if (!stripPropsMacros || (tagName !== 'xacro:property' && tagName !== 'xacro:macro')) {\r\n            cloned.appendChild(deepClone(child, stripPropsMacros));\r\n        }\r\n    }\r\n    return cloned;\r\n}\r\n\r\n// Takes an array of xml elements and removes the last elements that\r\n// are comments or newlines.\r\nexport function removeEndCommentsFromArray(arr) {\r\n    while (arr.length > 0) {\r\n        const el = arr[arr.length - 1];\r\n        if (el.nodeType !== el.ELEMENT_NODE) {\r\n            arr.pop();\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// Expression helpers\r\nexport function isOperator(str) {\r\n    const regexp = /^[()/*+\\-%|&=[\\]]+$/;\r\n    return regexp.test(str);\r\n}\r\n\r\nexport function isString(str) {\r\n    const regexp = /^(('[^']*?')|(\"[^\"]*?\")|(`[^`]*?`))$/;\r\n    return regexp.test(str);\r\n}\r\n\r\n// TODO: make this more robust\r\nexport function isNumber(str) {\r\n    return !isNaN(parseFloat(str)) && !/[^0-9.eE-]/.test(str);\r\n}\r\n\r\n// TODO: this needs to tokenize numbers together\r\nexport function tokenize(str) {\r\n    const regexp = /(('[^']*?')|(\"[^\"]*?\")|(`[^`]*?`)|([()/*+\\-%|&=[\\]]+))/g;\r\n    return str\r\n        .replace(regexp, m => ` ${ m } `)\r\n        .trim()\r\n        .split(/\\s+/g);\r\n}\r\n\r\nexport function normalizeExpression(str) {\r\n    // Remove any instances of \"--\" or \"++\" that might occur from negating a negative number\r\n    // by adding a space that are not in a string.\r\n    return str.replace(/[-+]{2,}/, val => {\r\n        let positive = true;\r\n        for (let i = 0, l = val.length; i < l; i++) {\r\n            const operator = val[i];\r\n            if (operator === '-') {\r\n                positive = !positive;\r\n            }\r\n        }\r\n\r\n        return positive ? '+' : '-';\r\n    });\r\n}\r\n\r\n// Property Set Helpers\r\nexport const PARENT_SCOPE = Symbol('parent');\r\n\r\n// merges a set of properties together into a single set retaining\r\n// the parent scope link as well.\r\nexport function mergePropertySets(...args) {\r\n    const res = {};\r\n    for (let i = 0, l = args.length; i < l; i++) {\r\n        const obj = args[i];\r\n        for (const key in obj) {\r\n            res[key] = obj[key];\r\n        }\r\n        if (PARENT_SCOPE in obj) {\r\n            res[PARENT_SCOPE] = obj[PARENT_SCOPE];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n// Copies a property set and creates a link to the original set as a parent scope\r\nexport function createNewPropertyScope(properties) {\r\n    const res = mergePropertySets(properties);\r\n    res[PARENT_SCOPE] = properties;\r\n    return res;\r\n}\r\n","import { isNumber } from './utils.js';\r\nimport { Parser } from 'expr-eval';\r\n\r\nconst parser = new Parser();\r\n\r\nparser.unaryOps = {\r\n    '-': parser.unaryOps['-'],\r\n    '+': parser.unaryOps['+'],\r\n    '!': parser.unaryOps['!'],\r\n};\r\n\r\nparser.functions = {\r\n    sin: Math.sin,\r\n    cos: Math.cos,\r\n    tan: Math.tan,\r\n    asin: Math.asin,\r\n    acos: Math.acos,\r\n    atan: Math.atan,\r\n    log: Math.log,\r\n    atan2: Math.atan2,\r\n    pow: Math.pow,\r\n};\r\n\r\nparser.binaryOps = {\r\n    ...parser.binaryOps,\r\n    '+': (a, b) => {\r\n        if (isNumber(a)) {\r\n            a = Number(a);\r\n        }\r\n\r\n        if (isNumber(b)) {\r\n            b = Number(b);\r\n        }\r\n\r\n        return a + b;\r\n    },\r\n    'in': (a, b) => {\r\n        if (Array.isArray(b)) {\r\n            return b.includes(a);\r\n        } else if (typeof b === 'string') {\r\n            return b.includes(a);\r\n        } else {\r\n            return a in b;\r\n        }\r\n    },\r\n};\r\n\r\nparser.consts = {\r\n    ...parser.consts,\r\n    pi: Math.PI,\r\n    e: Math.E,\r\n};\r\n\r\nexport function evaluateExpression(expr) {\r\n    return parser.evaluate(expr);\r\n}\r\n","import {\n    getUrlBase,\n    removeEndCommentsFromArray,\n    getElementsWithName,\n    deepClone,\n    isOperator,\n    isString,\n    isNumber,\n    normalizeExpression,\n    tokenize,\n    mergePropertySets,\n    createNewPropertyScope,\n    PARENT_SCOPE,\n} from './utils.js';\nimport { evaluateExpression } from './evaluateExpression.js';\n\nexport class XacroParser {\n\n    constructor() {\n        this.inOrder = true;\n        this.requirePrefix = true;\n        this.localProperties = true;\n        this.rospackCommands = {};\n        this.workingPath = '';\n    }\n\n    async getFileContents(path) {\n        throw new Error('XacroParser: getFileContents() not implemented.');\n    }\n\n    async parse(data) {\n\n        /* Evaluation */\n        // Evaluate expressions and rospack commands in attribute text\n        // TODO: expressions can basically be any python expression\n        function evaluateAttribute(str, properties, finalValue = false) {\n\n            // recursively unpack parameters\n            function unpackParams(str, properties) {\n\n                // if we're unpacking something that's already a number then just return\n                if (typeof str === 'number') {\n                    return str;\n                }\n\n                // process all of the ${} and $() expressions\n                const res = str.replace(/(\\$?\\$\\([^)]+\\))|(\\$?\\${[^}]+})/g, match => {\n\n                    // if we encounter an escaped $$ then return early\n                    if (/^\\$\\$/.test(match)) {\n                        return match;\n                    }\n\n                    const isRospackCommand = /^\\$\\(/.test(match);\n                    let contents = match.substring(2, match.length - 1);\n                    contents = unpackParams(contents, properties);\n\n                    if (isRospackCommand) {\n\n                        const command = unpackParams(contents, properties);\n                        const tokens = command.split(/\\s+/g);\n                        const stem = tokens.shift();\n\n                        try {\n                            return handleRospackCommand(stem, ...tokens);\n                        } catch (e) {\n                            throw new Error(`XacroParser: Cannot run rospack command \"${ contents }\".\\n` + e.message);\n                        }\n\n                    } else {\n                        if (stack.includes(contents)) {\n                            throw new Error(\n                                `XacroParser: Cannot evaluate infinitely recursive expression: ${\n                                    stack.join(' > ')\n                                } > ${\n                                    contents\n                                }`\n                            );\n                        }\n\n                        stack.push(contents);\n\n                        const operators = /(()|()|()|[()/*+\\-%|&=[\\]])+/g;\n                        const expr = tokenize(contents)\n                            .map(t => {\n                                operators.lastIndex = 0;\n                                if (isOperator(t)) return t;\n                                if (isNumber(t)) return t;\n                                if (isString(t)) return t;\n\n                                if (t in properties) {\n                                    const arg = unpackParams(properties[t], properties);\n                                    if (!isNumber(arg)) {\n                                        return `\"${ arg.toString().replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"') }\"`;\n                                    } else {\n                                        return arg;\n                                    }\n                                } else {\n                                    return t;\n                                }\n                            })\n                            .join('');\n\n                        stack.pop();\n\n                        if (isString(expr)) {\n                            return expr.substring(1, expr.length - 1);\n                        } else if (isNumber(expr)) {\n                            return expr;\n                        } else {\n                            const cleanExpr = normalizeExpression(expr);\n                            return handleExpressionEvaluation(cleanExpr);\n                        }\n                    }\n                });\n\n                return res;\n\n            }\n\n            const stack = [];\n            const allProps = mergePropertySets(globalProperties, properties);\n            try {\n                // fix the escaped dollar signs only at the end to prevent double evaluation and only\n                // if the value is not an intermediate value like a computed property.\n                let result = unpackParams(str, allProps);\n                if (finalValue) {\n                    result = result.replace(/\\${2}([({])/g, (val, brace) => `$${ brace }`);\n                }\n                return result;\n            } catch (e) {\n                throw new Error(`XacroParser: Failed to process expression \"${ str }\". \\n` + e.message);\n            }\n\n        }\n\n        // Evaluate the given node as a macro\n        async function evaluateMacro(node, properties, macros, resultsList) {\n\n            // Find the macro\n            const macroName = node.tagName.replace(/^xacro:/, '');\n            const macro = macros[macroName];\n\n            if (!macro) {\n                throw new Error(`XacroParser: Cannot find macro \"${ macroName }\"`);\n            }\n\n            // Copy the properties and macros so we can modify them with\n            // macro input fields and local macro definitions.\n            const ogProperties = properties;\n            const ogMacros = macros;\n            properties = createNewPropertyScope(properties);\n            macros = mergePropertySets(macros);\n\n            // Modify the properties with macro param inputs\n            let children = [];\n            for (const c of node.children) {\n                await processNode(c, ogProperties, ogMacros, children);\n            }\n            children = children.filter(c => c.nodeType === c.ELEMENT_NODE);\n\n            let blockCount = 0;\n            for (const p in macro.params) {\n                const param = macro.params[p];\n                if (node.hasAttribute(p)) {\n                    properties[p] = evaluateAttribute(node.getAttribute(p), ogProperties);\n                } else if (param.type === 'BLOCK') {\n                    properties[p] = [children[blockCount]];\n                    blockCount++;\n                } else if (param.type === 'MULTI_BLOCK') {\n                    properties[p] = [...children.filter(c => c.tagName === p)[0].childNodes];\n                } else {\n                    properties[p] = evaluateAttribute(macro.params[p].def, ogProperties);\n                }\n            }\n\n            // Expand the macro\n            const macroChildren = [...macro.node.childNodes];\n            for (const c of macroChildren) {\n                const nodes = [];\n                await processNode(c, properties, macros, nodes);\n                resultsList.push(...nodes);\n            }\n        }\n\n        /* Parsing */\n        // Conver the params into an object representation\n        function parseMacroParam(param) {\n            const obj = {};\n\n            // Save the type of parameter\n            // - two asterisks means an element expands input multiple\n            // - one asterisk means copy the first elemnt\n            // - no asterisks means value param\n            if (/^\\*\\*/.test(param)) {\n                obj.type = 'MULTI_BLOCK';\n            } else if (/^\\*/.test(param)) {\n                obj.type = 'BLOCK';\n            } else {\n                obj.type = 'PARAM';\n            }\n\n            // strip the asterisks\n            param = param.replace(/^\\*{1,2}/g, '');\n\n            // Check if a default value is provided\n            if (/:=/.test(param)) {\n                const [name, def] = param.split(':=');\n\n                // TODO: Support caret and default syntax\n                // TODO: is there any difference between the := and = syntax?\n                if (/^\\^/.test(def) || /\\|/.test(def)) {\n                    throw new Error(`XacroParser: ROS Jade pass-through notation not supported in macro defaults: ${ def }`);\n                }\n\n                obj.name = name;\n                obj.def = def;\n            } else {\n                obj.name = param;\n                obj.def = null;\n            }\n\n            return obj;\n        }\n\n        // Parse a xacro:macro tag\n        function parseMacro(node) {\n            // get attributes\n            const name = node.getAttribute('name').replace(/^xacro:/, '');\n            const params = node.getAttribute('params');\n\n            // parse params\n            const inputMap = {};\n            if (params) {\n                const inputs = params\n                    .trim()\n                    .split(/\\s+/g)\n                    .map(s => parseMacroParam(s));\n                inputs.forEach(inp => {\n                    inputMap[inp.name] = inp;\n                });\n            }\n\n            return {\n                name,\n                node: deepClone(node, false),\n                params: inputMap,\n            };\n        }\n\n        // Recursively process and expand a node\n        async function processNode(node, properties, macros, resultsList = []) {\n            if (node.nodeType !== node.ELEMENT_NODE) {\n                const res = node.cloneNode();\n                res.textContent = evaluateAttribute(res.textContent, properties, true);\n                resultsList.push(res);\n                return;\n            }\n\n            let tagName = node.tagName.toLowerCase();\n            if (!requirePrefix) {\n                switch (tagName) {\n\n                    case 'arg':\n                    case 'property':\n                    case 'macro':\n                    case 'insert_block':\n                    case 'if':\n                    case 'unless':\n                    case 'include':\n                    case 'element':\n                    case 'attribute':\n                        tagName = `xacro:${ tagName }`;\n                        break;\n                    default:\n                        if (tagName in macros) {\n                            tagName = `xacro:${ tagName }`;\n                        }\n                        break;\n\n                }\n            }\n\n            switch (tagName) {\n\n                case 'xacro:property': {\n                    removeEndCommentsFromArray(resultsList);\n\n                    const name = node.getAttribute('name');\n\n                    let value;\n                    if (node.hasAttribute('value')) {\n                        value = node.getAttribute('value');\n                    } else if (node.hasAttribute('default')) {\n                        value = node.getAttribute('default');\n                    } else {\n                        const childNodes = [...node.childNodes];\n                        value = [];\n                        for (const c of childNodes) {\n                            value.push(deepClone(c, false));\n                        }\n                    }\n\n                    let scope = 'global';\n                    if (localProperties) {\n                        scope = node.getAttribute('scope') || 'local';\n                    }\n\n                    // Emulated behavior here\n                    // https://github.com/ros/xacro/blob/melodic-devel/src/xacro/__init__.py#L565\n                    if (scope !== 'local') {\n                        value = evaluateAttribute(value, properties);\n                    }\n\n                    if (scope === 'global') {\n                        globalProperties[name] = value;\n                    } else if (scope === 'parent') {\n                        properties[PARENT_SCOPE][name] = value;\n                    } else {\n                        properties[name] = value;\n                    }\n\n                    break;\n                }\n                case 'xacro:macro': {\n                    removeEndCommentsFromArray(resultsList);\n\n                    const macro = parseMacro(node);\n                    macros[macro.name] = macro;\n                    break;\n                }\n                case 'xacro:insert_block': {\n                    removeEndCommentsFromArray(resultsList);\n\n                    const name = node.getAttribute('name');\n                    const nodes = properties[name];\n\n                    for (const c of nodes) {\n                        await processNode(c, properties, macros, resultsList);\n                    }\n                    return;\n                }\n                case 'xacro:if':\n                case 'xacro:unless': {\n                    removeEndCommentsFromArray(resultsList);\n\n                    const value = evaluateAttribute(node.getAttribute('value'), properties, true);\n                    let bool = null;\n                    if (!isNaN(parseFloat(value))) {\n                        bool = !!parseFloat(value);\n                    } else if (value === 'true' || value === 'false') {\n                        bool = value === 'true';\n                    } else {\n                        bool = value;\n                    }\n\n                    if (tagName === 'xacro:unless') {\n                        bool = !bool;\n                    }\n\n                    if (bool) {\n                        const childNodes = [...node.childNodes];\n                        for (const c of childNodes) {\n                            await processNode(c, properties, macros, resultsList);\n                        }\n                    }\n                    return;\n                }\n                case 'xacro:include': {\n                    removeEndCommentsFromArray(resultsList);\n\n                    if (node.hasAttribute('ns')) {\n                        throw new Error('XacroParser: xacro:include name spaces not supported.');\n                    }\n                    const filename = evaluateAttribute(node.getAttribute('filename'), properties, true);\n                    const isAbsolute = /^[/\\\\]/.test(filename) || /^[a-zA-Z]+:[/\\\\]/.test(filename);\n                    const filePath = isAbsolute ? filename : currWorkingPath + filename;\n\n                    const prevWorkingPath = currWorkingPath;\n                    currWorkingPath = getUrlBase(filePath);\n\n                    const includeContent = await loadInclude(filePath);\n                    const childNodes = [...includeContent.children[0].childNodes];\n                    for (const c of childNodes) {\n                        await processNode(c, properties, macros, resultsList);\n                    }\n\n                    currWorkingPath = prevWorkingPath;\n                    return;\n                }\n                case 'xacro:arg':\n                case 'xacro:attribute':\n                case 'xacro:element':\n                    throw new Error(`XacroParser: ${ tagName } tags not supported.`);\n                default: {\n                    // TODO: check if there's a 'call' attribute here which indicates that\n                    // a macro should be invoked?\n                    if (/^xacro:/.test(tagName) || tagName in macros) {\n                        removeEndCommentsFromArray(resultsList);\n\n                        return evaluateMacro(node, properties, macros, resultsList);\n                    } else {\n\n                        const res = node.cloneNode();\n                        for (let i = 0, l = res.attributes.length; i < l; i++) {\n                            const attr = res.attributes[i];\n                            const value = evaluateAttribute(attr.value, properties, true);\n                            res.setAttribute(attr.name, value);\n                        }\n\n                        const childNodes = [...node.childNodes];\n                        const resultChildren = [];\n                        for (let i = 0, l = childNodes.length; i < l; i++) {\n                            await processNode(childNodes[i], properties, macros, resultChildren);\n                        }\n                        resultChildren.forEach(c => res.appendChild(c));\n                        resultsList.push(res);\n                    }\n                }\n\n            }\n        }\n\n        // Process all property and macro tags into the objects\n        async function gatherPropertiesAndMacros(el, properties, macros) {\n            const propertyEl = getElementsWithName(el, 'xacro:property');\n            if (!requirePrefix) {\n                propertyEl.push(...getElementsWithName(el, 'property'));\n            }\n            for (const el of propertyEl) {\n                await processNode(el, properties, macros);\n            }\n\n            const macroEl = getElementsWithName(el, 'xacro:macro');\n            if (!requirePrefix) {\n                macroEl.push(...getElementsWithName(el, 'macro'));\n            }\n            for (const el of macroEl) {\n                await processNode(el, properties, macros);\n            }\n        }\n\n        // Process a document node with a new property and macro scope\n        async function processXacro(xacro, properties, macros) {\n            const res = xacro.cloneNode();\n            for (let i = 0, l = xacro.children.length; i < l; i++) {\n                const child = [];\n                await processNode(xacro.children[i], properties, macros, child);\n\n                const root = child[0];\n                root.removeAttribute('xmlns:xacro');\n                res.appendChild(root);\n            }\n            return res;\n        }\n\n        async function loadInclude(path) {\n\n            try {\n                const text = await scope.getFileContents(path);\n                return new DOMParser().parseFromString(text, 'text/xml');\n            } catch (e) {\n                throw new Error(`XacroParser: Could not load included file: ${ path }`);\n            }\n\n        }\n\n        async function loadIncludes(xacro, workingPath, results = []) {\n\n            const includeEl = getElementsWithName(xacro, 'xacro:include');\n            if (!requirePrefix) {\n                includeEl.push(...getElementsWithName(xacro, 'include'));\n            }\n\n            const promises = includeEl.map(el => {\n                // TODO: Handle namespaces on the include.\n                if (el.hasAttribute('ns')) {\n                    throw new Error('XacroParser: xacro:include name spaces not supported.');\n                }\n\n                const filename = el.getAttribute('filename');\n                const namespace = el.getAttribute('ns') || null;\n                const isAbsolute = /^[/\\\\]/.test(filename) || /^[a-zA-Z]+:[/\\\\]/.test(filename);\n                const filePath = isAbsolute ? filename : workingPath + filename;\n                const pr = loadInclude(filePath)\n                    .then(content => {\n                        results.push({ filename, namespace, content });\n\n                        const relPath = getUrlBase(filePath);\n                        return loadIncludes(content, relPath, results);\n                    });\n                return pr;\n            });\n\n            await Promise.all(promises);\n            return results;\n        }\n\n        // TODO: Provide a default \"arg\" command function that defaults to\n        // xacro:arg fields.\n        const scope = this;\n        const inOrder = this.inOrder;\n        const workingPath = this.workingPath + (!/[\\\\/]$/.test(this.workingPath) ? '/' : '');\n        const requirePrefix = this.requirePrefix;\n        const rospackCommands = this.rospackCommands;\n        const globalMacros = {};\n        const includeMap = {};\n        const globalProperties = { True: 1, False: 0 };\n        globalProperties[PARENT_SCOPE] = globalProperties;\n\n        // TODO: remove unsave eval\n        const handleRospackCommand = (stem, ...args) => rospackCommands[stem](...args);\n        const handleExpressionEvaluation = evaluateExpression;\n\n        let localProperties = this.localProperties;\n        let currWorkingPath = workingPath;\n        let content = new DOMParser().parseFromString(data, 'text/xml');\n\n        if (localProperties && !inOrder) {\n            console.warn('XacroParser: Implicitly setting \"localProperties\" option to false because \"inOrder\" is false.');\n            localProperties = false;\n        }\n\n        let inOrderPromise = null;\n        if (!inOrder) {\n            inOrderPromise = (async function() {\n                await gatherPropertiesAndMacros(content, globalProperties, globalMacros);\n                content = deepClone(content, true);\n\n                return loadIncludes(content, workingPath)\n                    .then(arr => {\n                        arr.forEach(inc => {\n                            // TODO: handle namespaces here when rolling up properties and macros\n                            gatherPropertiesAndMacros(inc.content, globalProperties, globalMacros);\n                            inc.content = deepClone(inc.content, true);\n                            includeMap[inc.filename] = inc.content;\n                        });\n                    });\n            })();\n        } else {\n            inOrderPromise = Promise.resolve();\n        }\n\n        await inOrderPromise;\n        return processXacro(content, globalProperties, globalMacros);\n    }\n\n}\n"],"names":["Parser"],"mappings":"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"}